name: go test

on:
  push:
    tags:
      - v*
    branches:
      - master

  pull_request:

jobs:
  module-matrix:
    name: Go module matrix
    runs-on: ubuntu-latest

    outputs:
      modules: ${{ steps.modules.outputs.modules }}

    steps:
      - uses: actions/checkout@v5
      - name: Find go modules
        id: modules
        shell: bash
        run: |
          # This script finds all go modules declared in this repo and resolves to a relative path to each of those.
          #
          # NOTES:
          #
          # > * git bash on a windows runner should support GNU find. find flags should be supported by find on macos.
          # > * We don't attempt any tricks with the go work command. Perhaps this will be the official way in future go releases.
          # > * There is no simple way to get the expected result with go list, unless all submodules are dependencies of the
          #     root module (which is not a requirement).
          set -euxo pipefail

          root="$(git rev-parse --show-toplevel)"
          cd "${root}"

          declare -i index=0
          declare -a all_mods
          printf "modules=[" >> "$GITHUB_OUTPUT"
          while read module_location ; do
            if [ $index -gt 0 ] ; then
              printf "," >> "$GITHUB_OUTPUT"
            fi
            relative_location=${module_location#"$root"/}
            module_dir=${relative_location%"/go.mod"}
            base_dir="${module_dir#"./"}"
            printf " \"${base_dir}\"" >> "$GITHUB_OUTPUT"
            all_mods+=("${base_dir}")
            ((index++)) || true
          done < <(find . -name go.mod | grep -v "\.git" | sort | uniq)
          printf "]" >> "$GITHUB_OUTPUT"

          echo "::notice title=Modules found::${all_mods[@]}"

  module-lint:
    name: Go module lint
    runs-on: ubuntu-latest
    needs: [ module-matrix ]

    strategy:
      matrix:
        # all sub modules in this repo must be linted separately
        module: ${{ fromJSON(needs.module-matrix.outputs.modules) }}

    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: stable
          check-latest: true
          cache: true
          cache-dependency-path: '**/go.sum'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          only-new-issues: true
          skip-cache: true
          working-directory: '${{ matrix.module }}'

  lint:
    needs: [ module-lint ]
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Linting complete
        run: |
          echo "All modules linted"

  module-test:
    name: Unit tests
    runs-on: ${{ matrix.os }}
    needs: [ module-matrix ]

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        go_version: ['oldstable', 'stable' ]
        module: ${{ fromJSON(needs.module-matrix.outputs.modules) }}

    steps:
    - uses: actions/setup-go@v6
      with:
        go-version: '${{ matrix.go_version }}'
        check-latest: true
        cache: true
        cache-dependency-path: '**/go.sum'

    - uses: actions/checkout@v5
    - name: Run unit tests on a single module in this repo
      shell: bash
      working-directory: '${{ matrix.module }}'
      run: |
        # *.coverage.* pattern is automatically detected by codecov
        COVER_PROFILE="$(basename ${{ matrix.module }}).coverage.${{ matrix.os }}.${{ matrix.go_version }}.out"
        if [[ "${{ matrix.module }}" == "jsonutils/adapters/testintegration" ]] ; then
          # integration tests capture coverage elsewhere
          go test -v -race -coverprofile="${COVER_PROFILE}" -covermode=atomic -coverpkg=../../../... ./...
          exit 0
        fi
        go test -v -race -coverprofile="${COVER_PROFILE}" -covermode=atomic -coverpkg=$(go list)/... ./...

    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v5
      with:
        name: Multi modules aggregated coverage
        flags: '${{ matrix.go_version }}-${{ matrix.os }}'
        fail_ci_if_error: false
        verbose: true

  test:
    needs: [ module-test ]
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Tests complete
        run: |
          echo "All tests completed"
