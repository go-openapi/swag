name: go test

on:
  push:
    tags:
      - v*
    branches:
      - master

  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true
          cache: true
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: latest
          only-new-issues: true
          skip-cache: true

  test:
    name: Unit tests
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        go_version: ['oldstable', 'stable' ]

    steps:
    - uses: actions/setup-go@v5
      with:
        go-version: '${{ matrix.go_version }}'
        check-latest: true
        cache: true

    - uses: actions/checkout@v4
    - name: Run unit tests on all modules in this repo
      shell: bash
      run: |
        # This script runs all tests on all modules and their subpackages.
        #
        # NOTES:
        # * git bash on a windows runner should support GNU find. find flags should be supported by find on macos.
        # * we don't attempt tricks using go work. Perhaps this will be the official way in future go releases.
        set -euxo pipefail

        find . -name \*.mod -execdir pwd \; | grep -v "\.git" | sort | uniq | \
          while read module_dir ; do
            pushd "${module_dir}"
            # *.coverage.* pattern is automatically detected by codecov
            coverprofile="${module_dir##*/}.coverage.${{ matrix.os }}.${{ matrix.go_version }}.out"
            go test -v -race -coverprofile="${coverprofile}" -covermode=atomic -coverpkg=$(go list)/... ./...
            popd
          done

    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v5
      with:
        name: Multi modules aggregated coverage
        flags: '${{ matrix.go_version }}-${{ matrix.os }}'
        fail_ci_if_error: false
        verbose: true
